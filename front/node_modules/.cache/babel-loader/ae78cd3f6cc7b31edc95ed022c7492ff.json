{"ast":null,"code":"import { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nvar _jsxFileName = \"/var/www/html/front/src/index.js\";\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Axios from \"axios\";\nimport React, { useState, useEffect, Component } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport BtnCellRenderer from './btn-cell-renderer.jsx';\n/*ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\nclass GridExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.getSelectedRowData = () => {\n      let selectedNodes = this.gridApi.getSelectedNodes();\n      let selectedData = selectedNodes.map(node => node.data);\n      var payload = selectedData[0].id;\n      console.log(payload);\n      Axios.post('http://3.23.104.36:3001/cuponesBorrar', {\n        id: payload\n      }).then(res => {\n        console.log(res.data);\n      });\n    };\n\n    this.onGridReady = params => {\n      this.gridApi = params.api;\n      this.gridColumnApi = params.columnApi;\n\n      const updateData = data => {\n        this.setState({\n          rowData: data\n        });\n      };\n\n      Axios.post('http://3.23.104.36:3001/cuponesCargar').then(res => {\n        console.log(res.data);\n        updateData(res.data);\n      });\n    };\n\n    this.state = {\n      columnDefs: [{\n        field: 'id'\n      }, {\n        field: 'serie'\n      }, {\n        field: 'estatus'\n      }, {\n        field: 'establecimiento'\n      }, {\n        field: 'vigencia'\n      }, {\n        field: 'comandos',\n        cellRenderer: 'btnCellRenderer',\n        cellRenderer2: 'btnCellRenderer',\n        cellRendererParams: {\n          clicked: function (field) {\n            alert(`${field} was clicked`);\n          }\n        },\n        minWidth: 150\n      }],\n      defaultColDef: {\n        flex: 1,\n        minWidth: 100\n      },\n      components: {\n        btnCellRenderer: BtnCellRenderer\n      },\n      rowData: []\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"ag-theme-alpine\",\n      style: {\n        width: '98vw',\n        height: '90vh'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: this.getSelectedRowData,\n        style: {\n          margin: 10\n        },\n        children: \"Get Selected Nodes\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        id: \"myGrid\",\n        style: {\n          height: '100%',\n          width: '100%'\n        },\n        className: \"ag-theme-alpine\",\n        children: /*#__PURE__*/_jsxDEV(AgGridReact, {\n          columnDefs: this.state.columnDefs,\n          defaultColDef: this.state.defaultColDef,\n          components: this.state.components,\n          onGridReady: this.onGridReady,\n          rowData: this.state.rowData,\n          rowSelection: \"multiple\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 110,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 102,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 96,\n      columnNumber: 7\n    }, this);\n  }\n\n}\n\nReactDOM.render( /*#__PURE__*/_jsxDEV(GridExample, {}, void 0, false, {\n  fileName: _jsxFileName,\n  lineNumber: 124,\n  columnNumber: 17\n}, this), document.querySelector('#root'));\nreportWebVitals();","map":{"version":3,"sources":["/var/www/html/front/src/index.js"],"names":["ReactDOM","App","reportWebVitals","Axios","React","useState","useEffect","Component","AgGridColumn","AgGridReact","BtnCellRenderer","GridExample","constructor","props","getSelectedRowData","selectedNodes","gridApi","getSelectedNodes","selectedData","map","node","data","payload","id","console","log","post","then","res","onGridReady","params","api","gridColumnApi","columnApi","updateData","setState","rowData","state","columnDefs","field","cellRenderer","cellRenderer2","cellRendererParams","clicked","alert","minWidth","defaultColDef","flex","components","btnCellRenderer","render","width","height","margin","document","querySelector"],"mappings":"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","sourcesContent":["import ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport Axios from \"axios\";\nimport React, { useState, useEffect, Component } from 'react';\nimport { AgGridColumn, AgGridReact } from 'ag-grid-react';\nimport 'ag-grid-community/dist/styles/ag-grid.css';\nimport 'ag-grid-community/dist/styles/ag-theme-alpine.css';\nimport BtnCellRenderer from './btn-cell-renderer.jsx';\n\n/*ReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);*/\n\nclass GridExample extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      columnDefs: [\n        {\n          field: 'id'\n        },\n        {\n          field: 'serie'\n        },\n        {\n          field: 'estatus'\n        },\n        {\n          field: 'establecimiento'\n        },\n        {\n          field: 'vigencia'\n        },\n        { \n        field: 'comandos', \n        cellRenderer: 'btnCellRenderer', \n        cellRenderer2: 'btnCellRenderer',\n        cellRendererParams: {\n          clicked: function(field) {\n            alert(`${field} was clicked`);\n          }\n        },\n        minWidth: 150\n        },\n      ],\n      defaultColDef: {\n        flex: 1,\n        minWidth: 100,\n      },\n      components: {\n        btnCellRenderer: BtnCellRenderer\n      },\n      rowData: [],\n    };\n  }\n\n  getSelectedRowData = () => {\n     \n    let selectedNodes = this.gridApi.getSelectedNodes();\n    let selectedData = selectedNodes.map(node => node.data);\n    var payload =selectedData[0].id;\n    console.log(payload);\n    Axios.post('http://3.23.104.36:3001/cuponesBorrar',{id:payload})\n    .then(res => {\n      console.log(res.data);\n      \n    });\n  };\n\n\n  onGridReady = params => {\n    this.gridApi = params.api;\n    this.gridColumnApi = params.columnApi;\n\n    const updateData = data => {\n      this.setState({ rowData: data });\n    };\n\n    Axios.post('http://3.23.104.36:3001/cuponesCargar')\n    .then(res => {\n      console.log(res.data);\n      updateData(res.data);\n    });\n    \n  };\n  \n\n  render() {\n    return (\n      <div className=\"ag-theme-alpine\" style={{ width: '98vw', height: '90vh' }}>\n        <button \n          onClick={this.getSelectedRowData}\n          style={{margin: 10}}\n          >Get Selected Nodes\n        </button>\n        <div\n          id=\"myGrid\"\n          style={{\n            height: '100%',\n            width: '100%',\n          }}\n          className=\"ag-theme-alpine\"\n        >\n          <AgGridReact\n            columnDefs={this.state.columnDefs}\n            defaultColDef={this.state.defaultColDef}\n            components={this.state.components}\n            onGridReady={this.onGridReady}\n            rowData={this.state.rowData}\n            rowSelection=\"multiple\"\n          />\n        </div>\n      </div>\n    );\n  }\n}\n\nReactDOM.render(<GridExample></GridExample>, document.querySelector('#root'));\n\n\nreportWebVitals();\n"]},"metadata":{},"sourceType":"module"}